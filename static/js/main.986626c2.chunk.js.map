{"version":3,"sources":["components/FeedbackForm.tsx","utils/SecurityUtils.tsx","utils/StorageUtils.tsx","components/SettingsView.tsx","utils/SongUtils.tsx","utils/PlatformUtils.tsx","components/NavigationBar.tsx","pages/HomePage.tsx","components/SearchView.tsx","utils/StringUtils.tsx","service/SongsService.tsx","pages/BookPage.tsx","tracking/GoogleAnalytics.tsx","tracking/EventFunctions.tsx","components/LyricView.tsx","components/MusicView.tsx","utils/UiUtils.tsx","pages/SongPage.tsx","App.tsx","index.tsx","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ groupOptions: {} namespace object"],"names":["FeedbackScreen","octokit","Octokit","auth","encryptedtext","privateKey","CryptoJS","AES","decrypt","toString","enc","Utf8","fromWhom","setFromWhom","useState","message","setMessage","title","setTitle","feedbackResponseText","setFeedbackResponseText","feedbackResponseModal","setShowFeedbackResponseModal","_jsxs","id","children","IonItem","_jsx","IonLabel","position","IonInput","type","value","placeholder","onIonChange","e","detail","IonTextarea","rows","IonButton","expand","onClick","sentFromWhom","rest","issues","create","owner","repo","body","then","response","console","debug","status","data","error","IonModal","isOpen","onDidDismiss","clearResponseModal","className","Storage","Plugins","DARK_THEME","LIGHT_THEME","THEME_KEY","SettingsView","chosenSetting","setChosenSetting","IonContent","IonList","IonIcon","slot","icon","moon","IonToggle","name","toggleDarkModeHandler","theme","Object","values","document","classList","includes","window","localStorage","setItem","toggle","checked","FeedbackForm","color","SongViewMode","PLACEHOLDER_SONG","author","songNumber","lyrics","Map","presentation","songbooksListUrl","defaultSongbooks","bookId","lyricsUrl","musicUrl","cachedSongbooks","songbooksFetched","includeTestingSongbooks","async","getSongbooks","fetch","json","stableBooks","testingBooks","songbooks","concat","catch","getSongbookById","find","book","isDesktop","isPlatform","NavigationBar","props","showSettingsModal","setShowSettingsModal","songbookName","setSongbookName","useParams","songPageBlobUrl","setSongPageBlobUrl","useEffect","musicPageUrl","blob","blobUrl","URL","createObjectURL","IonToolbar","IonTitle","IonButtons","backButtonOnClick","homeOutline","RenderBackButton","toggleSongModeOnClick","musicalNotesOutline","swapHorizontalOutline","documentTextOutline","RenderToggleSongModeButton","songViewMode","Music","download","songDownloadName","href","downloadOutline","settingsOutline","HomePage","history","useHistory","setSongbooks","books","length","push","IonPage","IonHeader","map","it","songbook","IonCard","IonCardTitle","SearchView","songCards","setSongCards","songCardsIterator","songs","entries","LoadSongs","IonInfiniteScroll","onIonInfinite","event","target","disabled","Array","from","complete","IonInfiniteScrollContent","loadingSpinner","loadingText","songIterator","count","nextSong","next","done","song","GenerateSongCard","IonCardSubtitle","removePunctuation","s","replace","stringSimilarity","require","getSimilarity","word","search","compareTwoStrings","toLowerCase","tokenize","sentence","split","normalize","trim","normalizedLyrics","tokenizedLyrics","getOrfetchSongs","cachedSongs","get","undefined","songsForBook","set","listSongs","searchString","isNaN","matchScores","forEach","matchScore","searchTokens","titleTokens","authorTokens","titleMatchScore","searchTerm","similarityThreshold","titleTokenMatchScore","authorMatchScore","authorTokenMatchScore","has","String","join","lyricMatchScore","lyricTokenMatchScore","getMatchScore","filter","sort","song1","song2","startsWith","BookPage","setSearchString","setSongs","timeOutId","setTimeout","clearTimeout","savedSearchString","getItem","clearSearchText","removeItem","shape","fill","closeOutline","Event","category","action","label","ReactGA","triggerSongView","mode","LyricView","setSong","songId","Lyrics","number","getSong","IonGrid","IonRow","class","IonCol","size","IonCardHeader","IonCardContent","_song$presentation","key","songLyrics","presentationOrder","verseNumber","verseName","getVerseText","verseLyrics","buildLyricBlock","choruses","nonChoruses","mainChorusNumber","mainChorusLyrics","chorusName","chorusLyrics","chorusNumber","getLyrics","verse","lines","lyricsElement","line","index","Fragment","IonText","songsWithTwoTunes","MusicView","widthPixels","innerWidth","secondTune","setSecondTune","width","setWidth","zoomed","setZoomed","setSongbook","songHasTwoTunes","secondTuneSuffix","url","num","setMusicPageUrl","style","onDoubleClick","src","alt","doElementsOverlap","element1","element2","rect1","getBoundingClientRect","rect2","right","left","bottom","top","SongPage","setSongViewMode","songBookLength","setSongBookLength","currSongId","getNumSongsForBookId","addEventListener","ToggleNavButtonListeners","removeEventListener","navToPrevSong","navToNextSong","createGesture","el","getElementById","threshold","gestureName","direction","onEnd","Math","abs","velocityX","deltaX","enable","createSwipeGesture","navigateToPrevSong","navigateToNextSong","IonFab","vertical","horizontal","IonFabButton","arrowBackCircleOutline","RenderPrevButton","arrowForwardCircleOutline","RenderNextButton","prevButtonElement","querySelector","nextButtonElement","songPageCenterElement","visibility","max","min","initialize","pageview","location","pathname","App","getPlatforms","prefersDark","matchMedia","localStorageTheme","matches","HashRouter","Switch","Route","path","component","exact","ReactDOM","render","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","Error","code","ids","keys","module","exports"],"mappings":"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","file":"static/js/main.986626c2.chunk.js","sourcesContent":["import { IonButton, IonInput, IonItem, IonLabel, IonModal, IonTextarea } from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport \"./Components.css\";\n\nimport { decrypt } from \"../utils/SecurityUtils\";\nimport { Octokit } from \"@octokit/rest\";\n\n/**\n * Feedback Screen.\n * Uses GitHub issues api to create issues directly in the Song repo.\n */\nconst FeedbackScreen: React.FC = () => {\n  const PRIVATE_KEY = \"jesus private key\";\n  // REPO_OWNER can be a github username or organization name\n  const REPO_OWNER = \"Church-Life-Apps\";\n  const REPO_NAME = \"Songs\";\n  const ENCRYPTED_TOKEN = \"U2FsdGVkX1+bPnD7qF/W1r3lCIYIwy88qJ1SO+d9HiCkYac2WeRs2MOpFHVq5TjdPNV0vrizHfRlMCgxInEAIQ==\";\n\n  // Sets up octokit (github api wrapper)\n  const octokit = new Octokit({ auth: decrypt(ENCRYPTED_TOKEN, PRIVATE_KEY) });\n\n  const [fromWhom, setFromWhom] = useState<string>(\"\");\n  const [message, setMessage] = useState<string>(\"\");\n  const [title, setTitle] = useState<string>(\"\");\n  const [feedbackResponseText, setFeedbackResponseText] = useState<string>(\"\");\n  const [feedbackResponseModal, setShowFeedbackResponseModal] = useState<boolean>(false);\n\n  return (\n    <div id=\"feedbackFormDiv\">\n      <IonItem>\n        <IonLabel position=\"floating\">Name (Optional)</IonLabel>\n        <IonInput\n          type=\"text\"\n          value={fromWhom}\n          placeholder=\"Enter your name\"\n          onIonChange={(e) => setFromWhom(e.detail.value as string)}\n        ></IonInput>\n      </IonItem>\n\n      <IonItem>\n        <IonLabel position=\"floating\">Subject/Title</IonLabel>\n        <IonInput\n          type=\"text\"\n          value={title}\n          placeholder=\"Enter Subject/Title\"\n          onIonChange={(e) => setTitle(e.detail.value as string)}\n        ></IonInput>\n      </IonItem>\n\n      <IonItem>\n        <IonLabel position=\"floating\">What do you think?</IonLabel>\n        <IonTextarea\n          rows={7}\n          value={message}\n          placeholder=\"Enter feedback\"\n          onIonChange={(e) => setMessage(e.detail.value as string)}\n        ></IonTextarea>\n      </IonItem>\n\n      <IonButton expand=\"full\" onClick={createGithubIssue}>\n        Submit Feedback\n      </IonButton>\n\n      <IonModal id=\"feedbackResponseModal\" isOpen={feedbackResponseModal} onDidDismiss={clearResponseModal}>\n        <h1 className=\"center\">{feedbackResponseText}</h1>\n        <IonButton id=\"feedbackResponseOKButton\" onClick={clearResponseModal}>\n          OK\n        </IonButton>\n      </IonModal>\n    </div>\n  );\n\n  /**\n   * Creates a github issue with the feedback content.\n   */\n  function createGithubIssue() {\n    if (title === \"\" || message === \"\") {\n      setFeedbackResponseText(\"Please include a title/subject and a feedback message!\");\n    } else {\n      // using octokit rest smaller bundle size\n      const sentFromWhom = fromWhom || \"anonymous\";\n\n      octokit.rest.issues\n        .create({\n          owner: REPO_OWNER,\n          repo: REPO_NAME,\n          title: title,\n          body: `> ${message}\\n\\n— ${sentFromWhom}`,\n        })\n        .then(\n          function (response) {\n            console.debug(\"GitHub issue created successfully.\", response.status, response.data.body);\n            setFeedbackResponseText(\"Feedback Submitted Sucessfully, Thanks!\");\n          },\n          function (error) {\n            setFeedbackResponseText(`Error Submitting Feedback: ${error}`);\n            console.error(\"Error making GitHub issue: \", error);\n          }\n        );\n\n      clearForm();\n    }\n    setShowFeedbackResponseModal(true);\n  }\n\n  // Clears form fields.\n  function clearForm() {\n    setFromWhom(\"\");\n    setMessage(\"\");\n    setTitle(\"\");\n  }\n\n  // Clears and hides Response modal.\n  function clearResponseModal() {\n    setFeedbackResponseText(\"\");\n    setShowFeedbackResponseModal(false);\n  }\n};\n\nexport default FeedbackScreen;\n","/**\n * Helper functions for Security stuff.\n */\n\nimport CryptoJS from \"crypto-js\";\n\n/**\n * Uses AES to encrypt some text with the given private key.\n */\nexport function encrypt(normalText: string, privateKey: string): string {\n  return CryptoJS.AES.encrypt(normalText, privateKey).toString();\n}\n\n/**\n * Uses AES to decrypt some text with the given private key.\n */\nexport function decrypt(encryptedtext: string, privateKey: string): string {\n  return CryptoJS.AES.decrypt(encryptedtext, privateKey).toString(CryptoJS.enc.Utf8);\n}\n","import { Plugins } from \"@capacitor/core\";\n\n/**\n * Utilities for storing Simple Key-Value pair data locally.\n * On web this uses browser cache, on Android it uses SharedPreferences, on iOS it uses UserDefaults.\n */\n\nconst { Storage } = Plugins;\n\nexport const YES = \"yes\";\nexport const NO = \"no\";\n\n/**\n * Constants for theme related variables\n */\nexport const DARK_THEME = \"dark\";\nexport const LIGHT_THEME = \"light\";\nexport const THEME_KEY = \"theme\";\n\n/**\n * Constants for swipe gesture related varibles\n */\nexport const MINIMUM_SWIPE_DISTANCE = 10;\nexport const SWIPE_THRESHOLD = 10;\nexport const MINIMUM_SWIPE_VELOCITY = 0.2;\n\n/**\n * Stores an item with given key/value pair. The value can be any string, including JSON strings.\n * If an item with that key already existed, it will overwrite the value.\n */\nexport async function storeItem(key: string, value: string): Promise<void> {\n  return Storage.set({\n    key: key,\n    value: value,\n  }).catch((error) => {\n    console.error(`Error storing item because ${error}.`);\n  });\n}\n\n/**\n * Retrieves an item with the given key, or blank if not found.\n */\nexport async function getItem(key: string): Promise<string> {\n  const value = (await Storage.get({ key: key })).value;\n  if (value === null) {\n    return \"\";\n  }\n  return value;\n}\n\n/**\n * Clears all values from the storage cache.\n */\nexport function clearCache(): void {\n  console.debug(\"Clearing Local Cache.\");\n  Storage.clear();\n}\n","import { IonButton, IonContent, IonItem, IonLabel, IonList, IonIcon, IonToggle } from \"@ionic/react\";\nimport { moon } from \"ionicons/icons\";\nimport React, { useState } from \"react\";\nimport \"./Components.css\";\nimport FeedbackForm from \"./FeedbackForm\";\nimport { DARK_THEME, LIGHT_THEME, THEME_KEY } from \"../utils/StorageUtils\";\n/**\n * Settings Page.\n */\nconst SettingsView: React.FC = () => {\n  const [chosenSetting, setChosenSetting] = useState<string>(\"\");\n\n  const toggleDarkModeHandler = () => {\n    // Check current theme and swaps it\n    const theme = Object.values(document.body.classList).includes(DARK_THEME) ? LIGHT_THEME : DARK_THEME;\n\n    window.localStorage.setItem(THEME_KEY, theme);\n    document.body.classList.toggle(DARK_THEME);\n  };\n\n  const darkModeCheckedStatus = () => {\n    return Object.values(document.body.classList).includes(DARK_THEME);\n  };\n\n  return (\n    <IonContent>\n      {/* To add another settings item, add another IonItem with an IonLabel. */}\n      {/* TODO: Add Font Size as an option. */}\n      {chosenSetting === \"\" ? (\n        <IonList>\n          <IonItem id=\"settingsTitle\">\n            <IonLabel>Settings</IonLabel>\n          </IonItem>\n          <IonItem>\n            <IonButton onClick={() => setChosenSetting(\"feedback\")}>Submit Feedback</IonButton>\n          </IonItem>\n          <IonItem>\n            <IonIcon slot=\"start\" icon={moon} />\n            <IonLabel>Dark Mode</IonLabel>\n            <IonToggle\n              slot=\"end\"\n              name=\"darkMode\"\n              onIonChange={toggleDarkModeHandler}\n              checked={darkModeCheckedStatus()}\n            />\n          </IonItem>\n        </IonList>\n      ) : null}\n\n      {chosenSetting === \"feedback\" ? <FeedbackForm /> : null}\n\n      {chosenSetting !== \"\" ? (\n        <IonButton color=\"light\" expand=\"full\" id=\"backToSettingsButton\" onClick={() => setChosenSetting(\"\")}>\n          Return to Settings\n        </IonButton>\n      ) : null}\n    </IonContent>\n  );\n};\n\nexport default SettingsView;\n","/**\n * Helpers for Song Related things.\n *\n * Write the helper function here, and then use them by importing it by relative path like:\n *\n * import { makeThreeDigits } from '../utils/SongUtils'\n */\n\n/**\n * Prepends 0s onto a 1 or 2 digit number to make it look like a 3 digit number.\n */\nexport function makeThreeDigits(num: number): string {\n  if (num < 10) {\n    return `00${num}`;\n  } else if (num < 100) {\n    return `0${num}`;\n  } else {\n    return `${num}`;\n  }\n}\n\nexport enum SongViewMode {\n  Music,\n  Lyrics,\n}\n\n/**\n * Fields from the shl.json resource file.\n * Add more fields here when they are required in the app.\n */\nexport interface Song {\n  title: string;\n  author: string;\n  songNumber: number;\n  lyrics: Map<string, string[]>;\n  presentation: string;\n}\n\n// Placeholder blank song.\nexport const PLACEHOLDER_SONG: Song = { title: \"\", author: \"\", songNumber: 0, lyrics: new Map(), presentation: \"\" };\n\n/* ---------- Songbook Stuff -------------- */\nexport interface Songbook {\n  name: string;\n  bookId: string;\n  lyricsUrl: string;\n  musicUrl: string;\n}\n\n/* SongBooks List Url */\nexport const songbooksListUrl =\n  \"https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/resources/songbooks.json\";\n\n/**\n * Default Songbooks to show until we pull from the above link to dynamically get all songbooks.\n * Add songbooks to here when they are stable and include them in the subsequent release.\n */\nexport const defaultSongbooks = [\n  {\n    name: \"Songs and Hymns of Life\",\n    bookId: \"shl\",\n    lyricsUrl: \"https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/resources/metadata/shl.json\",\n    musicUrl: \"https://raw.githubusercontent.com/Church-Life-Apps/Resources/master/resources/images/shl/SHL_\",\n  },\n];\n\nlet cachedSongbooks = defaultSongbooks;\nlet songbooksFetched = false;\n\n/** For Developers only - flip to `true` to include beta books. Revert back to `false` before committing. */\nconst includeTestingSongbooks = false;\n\n/**\n * Gets list of supported songbooks from the above link.\n * Fetches from the list of songbooks or returns cached list if available.\n */\nexport async function getSongbooks(): Promise<Songbook[]> {\n  if (songbooksFetched) {\n    return cachedSongbooks;\n  }\n  return fetch(songbooksListUrl)\n    .then(async (response) => {\n      const body = await response.json();\n      const stableBooks: Songbook[] = body[\"songbooks\"];\n      const testingBooks: Songbook[] = body[\"testing\"];\n      const songbooks = includeTestingSongbooks ? stableBooks.concat(testingBooks) : stableBooks;\n      cachedSongbooks = songbooks;\n      songbooksFetched = true;\n      return songbooks;\n    })\n    .catch((e) => {\n      console.error(`Failed to get songbooks list due to ${e}`);\n      return defaultSongbooks;\n    });\n}\n\n/**\n * Get Songbook By Id.\n */\nexport async function getSongbookById(bookId: string): Promise<Songbook | undefined> {\n  const songbooks = await getSongbooks();\n  return songbooks.find((book) => book.bookId === bookId);\n}\n","import { getPlatforms, isPlatform } from \"@ionic/react\";\n\n/**\n * Platform Utils:\n *\n * Android: Current platforms: android,cordova,capacitor,mobile,hybrid\n * iOS:\n * Chrome Mobile Mode: Current platforms: android,tablet,mobile,mobileweb\n * Chrome Regular Desktop: Current platforms: desktop\n */\n\n/**\n * Returns true if this is app currently running on an iOS device.\n */\nexport function isIOS(): boolean {\n  return isPlatform(\"ios\");\n}\n\n/**\n * Returns true if this app is currently running on an Android device.\n */\nexport function isAndroid(): boolean {\n  return isPlatform(\"android\");\n}\n\n/**\n * Returns true if this app is currently running on a desktop device.\n */\nexport function isDesktop(): boolean {\n  return isPlatform(\"desktop\");\n}\n\n/**\n * Returns true if this app is currently running on a mobile device.\n */\nexport function isMobile(): boolean {\n  return isPlatform(\"mobile\");\n}\n\n/**\n * Returns true if this app is currently on a web browser running in a mobile device.\n */\nexport function isMobileWeb(): boolean {\n  return isPlatform(\"mobileweb\");\n}\n\n/**\n * Returns true if this app is currently running on a tablet device.\n */\nexport function isTablet(): boolean {\n  return isPlatform(\"tablet\");\n}\n\n/**\n * Returns true if the platform supports Cordova.\n *\n * * SQLite requires Cordova.\n */\nexport function isCordova(): boolean {\n  return isPlatform(\"cordova\");\n}\n\nexport function logPlatforms(): void {\n  console.debug(\"Current platforms: \" + getPlatforms());\n}\n","import { IonButton, IonTitle, IonToolbar, IonButtons, IonModal, IonIcon } from \"@ionic/react\";\nimport \"./Components.css\";\nimport {\n  documentTextOutline,\n  homeOutline,\n  musicalNotesOutline,\n  settingsOutline,\n  swapHorizontalOutline,\n  downloadOutline,\n} from \"ionicons/icons\";\nimport React, { useEffect, useState } from \"react\";\nimport SettingsView from \"../components/SettingsView\";\nimport { useParams } from \"react-router\";\nimport { getSongbookById, SongViewMode } from \"../utils/SongUtils\";\nimport { isDesktop, isMobileWeb } from \"../utils/PlatformUtils\";\n\ninterface NavigationBarProps {\n  backButtonOnClick?: () => void;\n  toggleSongModeOnClick?: () => void;\n  songViewMode?: SongViewMode;\n  musicPageUrl?: string;\n  songDownloadName?: string;\n}\n\nexport const defaultNavigationTitle = \"Choose a Songbook!\";\n\n/**\n * Navigation Bar Component\n */\nconst NavigationBar: React.FC<NavigationBarProps> = (props) => {\n  // whether or not to show settings modal\n  const [showSettingsModal, setShowSettingsModal] = useState<boolean>(false);\n  const [songbookName, setSongbookName] = useState<string>(defaultNavigationTitle);\n  const { bookId } = useParams<{ bookId: string }>();\n  const [songPageBlobUrl, setSongPageBlobUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    getSongbookById(bookId).then((book) => {\n      if (book) {\n        setSongbookName(book.name);\n      }\n    });\n  }, [bookId]);\n\n  // The reason we need this is beacuse you cannot download things cross origin\n  // but blob data is considered same origin, so here we fetch the image data and\n  // create a blob url and we then use that blob url when we render the download button\n  useEffect(() => {\n    fetch(props.musicPageUrl as string)\n      .then((response) => response.blob())\n      .then((blob) => {\n        const blobUrl = URL.createObjectURL(blob);\n        if (songPageBlobUrl !== blobUrl) {\n          setSongPageBlobUrl(blobUrl);\n        }\n      })\n      .catch((e) => console.error(e));\n  }, [props.musicPageUrl]);\n\n  return (\n    <IonToolbar>\n      <IonTitle id=\"appName\">{songbookName}</IonTitle>\n      <IonButtons slot=\"start\">{RenderBackButton()}</IonButtons>\n      <IonButtons slot=\"primary\">\n        {RenderToggleSongModeButton()}\n        {(isDesktop() || isMobileWeb()) &&\n          props.songViewMode === SongViewMode.Music &&\n          RenderDownloadSheetMusicButton()}\n        {/* TODO: Put this Image/Lyric mode button into settings page.\n          This might require some react magic to get state from a child component */}\n        <IonButton onClick={() => setShowSettingsModal(true)}>\n          <IonIcon icon={settingsOutline} />\n        </IonButton>\n      </IonButtons>\n\n      {/* Settings Menu Popup  */}\n      <IonModal id=\"settingsModal\" isOpen={showSettingsModal} onDidDismiss={() => setShowSettingsModal(false)}>\n        <SettingsView />\n        <IonButton id=\"returnToHymnalButton\" onClick={() => setShowSettingsModal(false)}>\n          Back to Hymnal\n        </IonButton>\n      </IonModal>\n    </IonToolbar>\n  );\n\n  function RenderBackButton() {\n    if (!props.backButtonOnClick) {\n      return null;\n    }\n\n    return (\n      <IonButton onClick={props.backButtonOnClick}>\n        <IonIcon icon={homeOutline} />\n      </IonButton>\n    );\n  }\n\n  function RenderToggleSongModeButton() {\n    if (!props.toggleSongModeOnClick) {\n      return null;\n    }\n\n    return (\n      <IonButton id=\"songViewToggler\" onClick={props.toggleSongModeOnClick}>\n        <IonIcon icon={musicalNotesOutline} />\n        <IonIcon icon={swapHorizontalOutline} />\n        <IonIcon icon={documentTextOutline} />\n      </IonButton>\n    );\n  }\n\n  function RenderDownloadSheetMusicButton() {\n    return (\n      <IonButton id=\"music-download-button\" download={props.songDownloadName} href={songPageBlobUrl}>\n        <IonIcon icon={downloadOutline} />\n      </IonButton>\n    );\n  }\n};\n\nexport default NavigationBar;\n","import { IonContent, IonPage, IonHeader, IonCard, IonList, IonCardTitle } from \"@ionic/react\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { defaultSongbooks, getSongbooks, Songbook } from \"../utils/SongUtils\";\nimport \"./Pages.css\";\n/**\n * Home Page Component.\n *\n * Use 'useState' for dynamic variables.\n * When the variable changes, the places where it's being used are automatically re-rendered.\n */\n\nconst HomePage: React.FC = () => {\n  const history = useHistory();\n  const [songbooks, setSongbooks] = useState<Songbook[]>(defaultSongbooks);\n\n  useEffect(() => {\n    getSongbooks().then((books) => {\n      if (books.length === 1) {\n        history.push(books[0].bookId);\n      }\n      setSongbooks(books);\n    });\n  }, []);\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <NavigationBar />\n      </IonHeader>\n\n      <IonContent>\n        {/* Redirect to book page until we add more book or make this page functional */}\n        <IonList>\n          {songbooks.map((it) => {\n            return generateSongbookCard(it);\n          })}\n        </IonList>\n      </IonContent>\n    </IonPage>\n  );\n\n  function generateSongbookCard(songbook: Songbook): JSX.Element {\n    return (\n      <IonCard\n        key={songbook.name}\n        onClick={() => {\n          history.push(songbook.bookId);\n        }}\n        className=\"songbookCardView\"\n        id={songbook.bookId}\n      >\n        <IonCardTitle>{songbook.name}</IonCardTitle>\n      </IonCard>\n    );\n  }\n};\nexport default HomePage;\n","import {\n  IonList,\n  IonCard,\n  IonCardTitle,\n  IonCardSubtitle,\n  IonLabel,\n  IonItem,\n  IonInfiniteScroll,\n  IonInfiniteScrollContent,\n} from \"@ionic/react\";\nimport React, { useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { Song } from \"../utils/SongUtils\";\nimport \"./Components.css\";\n\ninterface SearchViewProps {\n  songs: Song[];\n}\n\n/**\n * Search View.\n */\nconst SearchView: React.FC<SearchViewProps> = (props: SearchViewProps) => {\n  const { bookId } = useParams<{ bookId: string }>();\n  const [songCards, setSongCards] = useState<JSX.Element[]>([]);\n  const [songCardsIterator] = useState(props.songs.entries());\n\n  const history = useHistory();\n\n  if (songCards.length === 0) {\n    LoadSongs(songCardsIterator, 20);\n  }\n  return songCards.length > 0 ? (\n    <div>\n      <IonList id=\"searchViewSongList\">{songCards}</IonList>\n      <IonInfiniteScroll onIonInfinite={LoadMoreSongs}>\n        <IonInfiniteScrollContent\n          loadingSpinner=\"bubbles\"\n          loadingText=\"Loading more songs...\"\n        ></IonInfiniteScrollContent>\n      </IonInfiniteScroll>\n    </div>\n  ) : (\n    <IonItem>\n      <IonLabel>No results found</IonLabel>\n    </IonItem>\n  );\n\n  function LoadMoreSongs(event: CustomEvent<void>) {\n    const target = event.target as HTMLIonInfiniteScrollElement;\n    if (!LoadSongs(songCardsIterator, 10)) {\n      target.disabled = true;\n    }\n    setSongCards(Array.from(songCards));\n    target.complete();\n  }\n\n  function LoadSongs(songIterator: IterableIterator<[number, Song]>, count: number): boolean {\n    while (count > 0) {\n      const nextSong = songIterator.next();\n      if (nextSong.done) {\n        return false;\n      }\n      const song = nextSong.value[1];\n      songCards.push(GenerateSongCard(song));\n      count--;\n    }\n\n    return true;\n  }\n\n  function GenerateSongCard(song: Song) {\n    return (\n      <IonCard\n        key={song.songNumber}\n        onClick={() => {\n          history.push(`/${bookId}/${song.songNumber}`);\n        }}\n        className=\"hymnalListView\"\n      >\n        <IonCardTitle>\n          {song.songNumber}. {song.title}\n        </IonCardTitle>\n        <IonCardSubtitle>{song.author}</IonCardSubtitle>\n      </IonCard>\n    );\n  }\n};\n\nexport default SearchView;\n","/**\n * Util functions for strings.\n */\n\n/**\n * Removes special characters from the string.\n */\nexport function removePunctuation(s: string): string {\n  return s.replace(/[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g, \"\");\n}\n\nconst stringSimilarity = require(\"string-similarity\"); // eslint-disable-line @typescript-eslint/no-var-requires\n\n/**\n * Returns a number between 0 and 1 based on how similar two strings are to each other (Case sensitive).\n * 0 = completely different.\n * 1 = the same string.\n */\nexport function getSimilarity(word: string, search: string): number {\n  return stringSimilarity.compareTwoStrings(removePunctuation(word.toString().toLowerCase()), search);\n}\n\nexport function tokenize(sentence: string): string[] {\n  return sentence.split(\" \");\n}\n\nexport function normalize(sentence: string): string {\n  return removePunctuation(sentence).toLowerCase().trim();\n}\n\n/**\n * Returns true if a string is a number, false otherwise.\n */\nexport function isNumeric(word: string): boolean {\n  return !isNaN(+word);\n}\n","import { getSongbookById, Song } from \"../utils/SongUtils\";\nimport { getSimilarity, isNumeric, normalize, tokenize } from \"../utils/StringUtils\";\n\n/**\n * File which handles retrieving and searching for songs.\n */\n\nconst songs = new Map<string, Song[]>();\n\n/**\n * Lightweight caches string tokenizations. These are reset on refresh.\n */\nconst normalizedLyrics: Map<number, string> = new Map<number, string>();\nconst tokenizedLyrics: Map<number, string[]> = new Map<number, string[]>();\n\n/**\n * Fetches the lyrics and stores it in memory as a variable.\n * Refreshing the page will cause another fetch.\n */\nasync function getOrfetchSongs(bookId: string): Promise<Song[]> {\n  const cachedSongs = songs.get(bookId);\n  if (cachedSongs === undefined) {\n    const songbook = await getSongbookById(bookId);\n    if (!songbook) {\n      console.error(\"No songbook found for id \" + bookId);\n      return [];\n    }\n    return fetch(songbook.lyricsUrl)\n      .then(async response => {\n        const body = await response.json();\n        const songsForBook = body[songbook.name];\n        songs.set(bookId, songsForBook);\n        return songsForBook;\n      })\n      .catch(e => {\n        console.error(`Failed to fetch song lyrics due to ${e}`);\n        return [];\n      });\n  } else {\n    console.debug(\"Returning stored lyrics for book \" + bookId);\n    return cachedSongs;\n  }\n}\n\n/**\n * Gets number of songs in the songbook for bookId.\n */\nexport async function getNumSongsForBookId(bookId: string): Promise<number> {\n  const songs = await getOrfetchSongs(bookId);\n  return songs.length;\n}\n\n/**\n * Retrieves a single song based on song number.\n */\nexport async function getSong(number: number, bookId: string): Promise<Song> {\n  const songs = await getOrfetchSongs(bookId);\n  if (isNaN(number) || number < 0 || number > songs.length) {\n    return { title: \"\", author: \"\", songNumber: -1, lyrics: new Map(), presentation: \"\" };\n  } else {\n    if (!(songs[number - 1].lyrics instanceof Map)) {\n      songs[number - 1].lyrics = new Map(Object.entries(songs[number - 1].lyrics));\n    }\n    return songs[number - 1];\n  }\n}\n\n/**\n * Returns a list of songs filtered and sorted by how well they match the given searchString.\n */\nexport async function listSongs(searchString: string, bookId: string): Promise<Song[]> {\n  const songs = await getOrfetchSongs(bookId);\n  if (searchString === \"\") {\n    return songs;\n  } else if (isNumeric(searchString)) {\n    return songs.filter(song => song.songNumber.toString().startsWith(searchString));\n  } else {\n    // Build a cache to speed up duplicate calls\n    const matchScores: Map<number, number> = new Map<number, number>();\n    songs.forEach(song => {\n      matchScores.set(song.songNumber, getMatchScore(song, searchString));\n    });\n\n    console.debug(matchScores);\n\n    return songs\n      .filter(song => (matchScores.get(song.songNumber) as number) > 0)\n      .sort(\n        (song1, song2) => (matchScores.get(song2.songNumber) as number) - (matchScores.get(song1.songNumber) as number)\n      );\n  }\n}\n\n// TODO: Extract values like this to be configurable outside of code so we can tweak on the fly.\n\n// This is a very strict threshold. In order for two strings to have similarity > 0.9,\n// they need to either be exactly the same, or only 1 letter off for every 10 or so letters.\nconst similarityThreshold = 0.9;\n\n// If the entire search string is a substring of the title or author, we should give the highest score.\nconst titleMatchScore = 1000;\nconst authorMatchScore = 900;\n\n// Score for each word that matches title or author.\nconst titleTokenMatchScore = 100;\nconst authorTokenMatchScore = 90;\n\n// If the entire search string is a substring of the lyric line, add 10.\n// We want this to have more influence than token matches in title or author,\n// but less influence than a title/author match on the entire search string.\nconst lyricMatchScore = 500;\n\n// We want lyric token matches to help distinguish between songs, but not\n// override any title/author token matches, so we pick a very low number here.\nconst lyricTokenMatchScore = 1;\n\n/**\n * Returns a number based on how well the song matches the search string.\n *\n * Notes:\n * This has to be fast. Optimimzations may include some kind of predefined lookup dictionary,\n * or storing past searches.\n */\nfunction getMatchScore(song: Song, searchString: string): number {\n  let matchScore = 0;\n\n  const search = normalize(searchString);\n  const searchTokens = tokenize(search);\n\n  const title = normalize(song.title);\n  const titleTokens = tokenize(title);\n\n  const author = normalize(song.author);\n  const authorTokens = tokenize(author);\n\n  // Check matches in title\n  if (title.includes(search)) {\n    matchScore += titleMatchScore;\n  } else {\n    for (const word of titleTokens) {\n      for (const searchTerm of searchTokens) {\n        if (getSimilarity(word, searchTerm) > similarityThreshold) {\n          matchScore += titleTokenMatchScore;\n        }\n      }\n    }\n  }\n\n  // Check matches in author\n  if (author.includes(search)) {\n    matchScore += authorMatchScore;\n  } else {\n    for (const word of authorTokens) {\n      for (const searchTerm of searchTokens) {\n        if (getSimilarity(word, searchTerm) > similarityThreshold) {\n          matchScore += authorTokenMatchScore;\n        }\n      }\n    }\n  }\n\n  // Populate local client-side caches if they are empty.\n  if (!normalizedLyrics.has(song.songNumber)) {\n    normalizedLyrics.set(\n      song.songNumber,\n      Object.values(song.lyrics)\n        .map(s => normalize(String(s)))\n        .join(\" \") as string\n    );\n  }\n\n  if (!tokenizedLyrics.has(song.songNumber)) {\n    tokenizedLyrics.set(song.songNumber, tokenize(normalizedLyrics.get(song.songNumber) as string));\n  }\n\n  // Check matches in lyrics\n  if ((normalizedLyrics.get(song.songNumber) as string).includes(search)) {\n    matchScore += lyricMatchScore;\n  } else {\n    for (const word of tokenizedLyrics.get(song.songNumber) as string[]) {\n      for (const searchTerm of searchTokens) {\n        if (getSimilarity(word, searchTerm) > similarityThreshold) {\n          matchScore += lyricTokenMatchScore;\n        }\n      }\n    }\n  }\n\n  return matchScore;\n}\n","import { IonContent, IonPage, IonHeader, IonInput, IonItem, IonButton, IonIcon } from \"@ionic/react\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport React, { useEffect, useState } from \"react\";\nimport SearchView from \"../components/SearchView\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Song } from \"../utils/SongUtils\";\nimport { listSongs } from \"../service/SongsService\";\nimport { closeOutline } from \"ionicons/icons\";\n\n/**\n * Book Page Component.\n *\n * Use 'useState' for dynamic variables.\n * When the variable changes, the places where it's being used are automatically re-rendered.\n */\nconst BookPage: React.FC = () => {\n  // the search string inputted by the user\n  const [searchString, setSearchString] = useState<string>(\"\");\n  const [songs, setSongs] = useState<Song[]>([]);\n  const { bookId } = useParams<{ bookId: string }>();\n\n  useEffect(() => {\n    const timeOutId = setTimeout(() => {\n      listSongs(searchString, bookId)\n        .then(songs => {\n          setSongs(songs);\n          localStorage.setItem(\"searchString\", searchString);\n        })\n        .catch(e => console.error(e));\n    }, 200);\n    return () => clearTimeout(timeOutId);\n  }, [searchString]);\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const savedSearchString = localStorage.getItem(\"searchString\");\n    if (savedSearchString) {\n      setSearchString(savedSearchString);\n    }\n  }, []);\n\n  const clearSearchText = () => {\n    localStorage.removeItem(\"searchString\");\n    setSearchString(\"\");\n  };\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <NavigationBar\n          backButtonOnClick={() => {\n            history.push(\"/\");\n            clearSearchText();\n          }}\n        />\n      </IonHeader>\n      <IonItem>\n        <IonInput\n          id=\"searchBar\"\n          type=\"search\"\n          value={searchString}\n          placeholder=\"Search for a song\"\n          onIonChange={word => setSearchString(word.detail.value as string)}\n        ></IonInput>\n        <IonButton shape=\"round\" fill=\"clear\" color=\"medium\" onClick={() => clearSearchText()}>\n          <IonIcon icon={closeOutline}></IonIcon>\n        </IonButton>\n      </IonItem>\n      {/* The key here will trigger a re-initialization of a new searchView when it changes. */}\n      <IonContent>\n        <SearchView key={searchString + songs.length} songs={songs} />\n      </IonContent>\n    </IonPage>\n  );\n};\n\nexport default BookPage;\n","import ReactGA from \"react-ga\";\n\nconst StreamID = \"UA-183902236-1\";\n\nexport const initGA = (): void => {\n  ReactGA.initialize(StreamID);\n};\n\nexport const PageView = (): void => {\n  ReactGA.pageview(window.location.pathname + window.location.search);\n  console.debug(\"Page viewed\");\n};\n\n/**\n * Event - Add custom tracking event.\n * @param {string} category\n * @param {string} action\n * @param {string} label\n */\n\nexport const Event = (category: string, action: string, label: string): void => {\n  ReactGA.event({\n    category: category,\n    action: action,\n    label: label,\n  });\n};\n","import { SongViewMode } from \"../utils/SongUtils\";\nimport { Event } from \"./GoogleAnalytics\";\n\nexport function triggerSongView(songNumber: number, mode: SongViewMode): void {\n  try {\n    Event(\"INTERACTION\", `Song viewed(${SongViewMode[mode]})`, songNumber.toString());\n    console.debug(`Song number: ${String(songNumber)} viewed in ${SongViewMode[mode]} mode`);\n  } catch (e) {\n    console.error(e);\n  }\n}\n","import {\n  IonCard,\n  IonCardContent,\n  IonCardHeader,\n  IonGrid,\n  IonRow,\n  IonCol,\n  IonCardTitle,\n  IonText,\n  IonCardSubtitle,\n} from \"@ionic/react\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { PLACEHOLDER_SONG, Song, SongViewMode } from \"../utils/SongUtils\";\nimport \"./Components.css\";\n//Import Event tracking\nimport { triggerSongView } from \"../tracking/EventFunctions\";\nimport { getSong } from \"../service/SongsService\";\nimport { useParams } from \"react-router\";\n\ninterface LyricViewProps {\n  songNumber: number;\n}\n\n/**\n * Lyric Viewer React Functional Component.\n */\nconst LyricView: React.FC<LyricViewProps> = (props: LyricViewProps) => {\n  const [song, setSong] = useState<Song>(PLACEHOLDER_SONG);\n  const { bookId, songId } = useParams<{ bookId: string; songId: string }>();\n\n  useEffect(() => {\n    triggerSongView(props.songNumber, SongViewMode.Lyrics);\n    getSong(props.songNumber, bookId).then((song) => {\n      setSong(song);\n    });\n  }, [songId]);\n\n  return (\n    <IonGrid>\n      <IonRow class=\"ion-justify-content-center\">\n        <IonCol size=\"12\" size-lg=\"8\" size-xl=\"6\" className=\"song-page-center\">\n          <IonCard id=\"lyricViewCard\" className=\"ion-padding\">\n            <IonCardHeader className=\"ion-text-center\">\n              <IonCardTitle key=\"title\">{song?.title}</IonCardTitle>\n              <IonCardSubtitle key=\"author\">By {song?.author}</IonCardSubtitle>\n            </IonCardHeader>\n            <IonCardContent key=\"lyrics\">{song ? getLyrics(song) : song}</IonCardContent>\n          </IonCard>\n        </IonCol>\n      </IonRow>\n    </IonGrid>\n  );\n\n  /**\n   * Parses all verse of the song to a list of JSX elements.\n   */\n  function getLyrics(song: Song): JSX.Element[] {\n    const lyrics: JSX.Element[] = [];\n    let key = 0;\n\n    const songLyrics = song.lyrics;\n    const presentationOrder = song.presentation?.split(\" \");\n\n    // if the song has a presentation order defined, use it;\n    // otherwise, present in written order\n    if (presentationOrder != null) {\n      presentationOrder.forEach((verseNumber) => {\n        const verseName: string = getVerseText(verseNumber);\n        const verseLyrics: string[] = songLyrics.get(verseNumber) || [\"\"];\n\n        lyrics.push(buildLyricBlock(verseName, verseLyrics, key++));\n      });\n    } else {\n      // separate chorus(es) and normal verses\n      const choruses: Map<string, string[]> = new Map();\n      const nonChoruses: Map<string, string[]> = new Map();\n      songLyrics.forEach((verseLyrics, verseNumber) => {\n        if (verseNumber.startsWith(\"c\")) {\n          choruses.set(verseNumber, verseLyrics);\n        } else {\n          nonChoruses.set(verseNumber, verseLyrics);\n        }\n      });\n\n      let mainChorusNumber: string, mainChorusLyrics: string[];\n      if (choruses.size) {\n        [mainChorusNumber, mainChorusLyrics] = choruses.entries().next().value;\n      }\n      nonChoruses.forEach((verseLyrics, verseNumber) => {\n        const verseName = getVerseText(verseNumber);\n        lyrics.push(buildLyricBlock(verseName, verseLyrics, key++));\n\n        if (mainChorusNumber) {\n          // insert chorus 1 between each verse\n          const chorusName = getVerseText(mainChorusNumber);\n          lyrics.push(buildLyricBlock(chorusName, mainChorusLyrics, key++));\n        }\n      });\n\n      // append all choruses except for chorus 1\n      choruses.forEach((chorusLyrics, chorusNumber) => {\n        if (chorusNumber === mainChorusNumber) {\n          return;\n        }\n        const chorusName = getVerseText(chorusNumber);\n        lyrics.push(buildLyricBlock(chorusName, chorusLyrics, key++));\n      });\n    }\n    return lyrics;\n  }\n\n  function getVerseText(verse: string) {\n    return verse\n      .toLowerCase()\n      .replace(\"v\", \"Verse \")\n      .replace(\"c\", \"Chorus \")\n      .replace(\"b\", \"Bridge \")\n      .replace(\"p\", \"Pre-Chorus \");\n  }\n\n  function buildLyricBlock(name: string, lines: string[], key: number) {\n    const lyricsElement: JSX.Element[] = lines.map((line, index) => <p key={index}>{line}</p>);\n    return (\n      <Fragment key={key}>\n        <div className=\"ion-margin-vertical\"></div>\n        <h5 className=\"ion-margin-top\">{name}</h5>\n        <IonText className=\"lyricVerse\" color=\"dark\">\n          {lyricsElement}\n        </IonText>\n      </Fragment>\n    );\n  }\n};\n\nexport default LyricView;\n","import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport \"./Components.css\";\nimport { getSongbookById, makeThreeDigits, Songbook, SongViewMode } from \"../utils/SongUtils\";\nimport { IonToggle } from \"@ionic/react\";\nimport { isDesktop } from \"../utils/PlatformUtils\";\n//Import Event tracking\nimport { triggerSongView } from \"../tracking/EventFunctions\";\nimport { useParams } from \"react-router\";\n\nconst imageSuffix = \".png\";\nconst alt = \"No Song Found\";\n\nconst songsWithTwoTunes = [156, 216, 278, 478];\n\n// Props are kind of like the parameters for the constructor of this class.\ninterface MusicViewProps {\n  songNumber: number;\n  setMusicPageUrl: Dispatch<SetStateAction<string>>;\n}\n\n/**\n * Song Viewer React Functional Component.\n */\nconst MusicView: React.FC<MusicViewProps> = (props: MusicViewProps) => {\n  const widthPixels = isDesktop() ? window.innerWidth / 2 : window.innerWidth;\n  const [secondTune, setSecondTune] = useState<boolean>(false);\n  const [width, setWidth] = useState<number>(widthPixels);\n  const [zoomed, setZoomed] = useState<boolean>(false);\n  const [songbook, setSongbook] = useState<Songbook>();\n  const { bookId } = useParams<{ bookId: string }>();\n\n  // Probably update this behavior later if other hymnals have songs with 2 tunes also.\n  const songHasTwoTunes = songsWithTwoTunes.includes(props.songNumber) && bookId === \"shl\";\n  const secondTuneSuffix = songHasTwoTunes && secondTune ? \"-B\" : \"\";\n\n  const url = songbook?.musicUrl + makeThreeDigits(props.songNumber) + secondTuneSuffix + imageSuffix;\n  useEffect(() => {\n    props.setMusicPageUrl(url);\n  });\n\n  useEffect(() => {\n    triggerSongView(props.songNumber, SongViewMode.Music);\n  }, [props.songNumber]);\n\n  useEffect(() => {\n    getSongbookById(bookId).then((book) => {\n      setSongbook(book);\n    });\n  }, [bookId]);\n\n  // TODO: Add Pinch and Zoom to image.\n  return (\n    <div>\n      {/* Second Tune Toggler  */}\n      {songHasTwoTunes && (\n        <div id=\"songToggler\">\n          <IonToggle checked={secondTune} onIonChange={() => setSecondTune(!secondTune)} />\n        </div>\n      )}\n\n      {/* image */}\n      <img\n        style={{ width: width }}\n        id=\"musicView\"\n        className=\"song-page-center\"\n        onDoubleClick={() => {\n          if (zoomed) {\n            setWidth(widthPixels);\n          } else setWidth(widthPixels * 2);\n          setZoomed(!zoomed);\n        }}\n        src={url}\n        alt={alt}\n      />\n    </div>\n  );\n};\n\nexport default MusicView;\n","import { MINIMUM_SWIPE_DISTANCE, SWIPE_THRESHOLD, MINIMUM_SWIPE_VELOCITY } from \"./StorageUtils\";\nimport { isDesktop } from \"./PlatformUtils\";\nimport { createGesture, Gesture, GestureDetail } from \"@ionic/react\";\n\nexport function doElementsOverlap(element1: HTMLElement, element2: HTMLElement): boolean {\n  const rect1 = element1.getBoundingClientRect();\n  const rect2 = element2.getBoundingClientRect();\n  return !(\n    rect1.right < rect2.left ||\n    rect1.left > rect2.right ||\n    rect1.bottom < rect2.top ||\n    rect1.top > rect2.bottom\n  );\n}\n\nexport function createSwipeGesture(\n  currSongId: number,\n  songBookLength: number,\n  navToPrevSong: () => void,\n  navToNextSong: () => void\n): void {\n  // Don't create swipe gesture if on desktop\n  if (isDesktop()) {\n    return;\n  }\n  const gesture: Gesture = createGesture({\n    el: document.getElementById(\"song-page-body\") as Node,\n    threshold: SWIPE_THRESHOLD,\n    gestureName: \"swipe-gesture\",\n    direction: \"x\",\n    onEnd: (detail: GestureDetail) => {\n      if (Math.abs(detail.velocityX) > MINIMUM_SWIPE_VELOCITY) {\n        if (detail.deltaX > MINIMUM_SWIPE_DISTANCE) {\n          if (currSongId > 1) {\n            navToPrevSong();\n          }\n        } else {\n          if (currSongId < songBookLength) {\n            navToNextSong();\n          }\n        }\n      }\n    },\n  });\n  gesture.enable();\n}\n","import { IonIcon, IonContent, IonPage, IonHeader, IonFab, IonFabButton } from \"@ionic/react\";\nimport { SongViewMode } from \"../utils/SongUtils\";\nimport { isDesktop } from \"../utils/PlatformUtils\";\nimport LyricView from \"../components/LyricView\";\nimport MusicView from \"../components/MusicView\";\nimport NavigationBar from \"../components/NavigationBar\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { arrowBackCircleOutline, arrowForwardCircleOutline } from \"ionicons/icons\";\n\n// Import Event tracking\nimport { Event } from \"../tracking/GoogleAnalytics\";\nimport { getNumSongsForBookId } from \"../service/SongsService\";\n// Import utils\nimport { doElementsOverlap } from \"../utils/UiUtils\";\nimport { createSwipeGesture } from \"../utils/UiUtils\";\n/**\n * Song Page Component.\n *\n * Use 'useState' for dynamic variables.\n * When the variable changes, the places where it's being used are automatically re-rendered.\n */\nconst SongPage: React.FC = () => {\n  const { bookId, songId } = useParams<{ bookId: string; songId: string }>();\n  const history = useHistory();\n  // music page url\n  const [musicPageUrl, setMusicPageUrl] = useState<string>(\"\");\n  // when in song view, use music view or lyrics view\n  const [songViewMode, setSongViewMode] = useState<SongViewMode>(SongViewMode.Lyrics);\n  const [songBookLength, setSongBookLength] = useState<number>(0);\n  // current song id converted to number\n  const currSongId: number = +songId;\n\n  useEffect(() => {\n    getNumSongsForBookId(bookId).then((size) => setSongBookLength(size));\n\n    window.addEventListener(\"resize\", ToggleNavButtonListeners);\n    return () => {\n      window.removeEventListener(\"resize\", ToggleNavButtonListeners);\n    };\n  }, [bookId]);\n\n  // mount/remounts the swipe gesture everytime songId/songBookLength changes\n  useEffect(() => {\n    createSwipeGesture(currSongId, songBookLength, navigateToPrevSong, navigateToNextSong);\n  }, [songId, songBookLength]);\n\n  useEffect(() => {\n    // want to give it enough time before running the button hiding/showing function\n    // if we run it too soon, the buttons won't be in the dom yet\n    setTimeout(ToggleNavButtonListeners, 1000);\n  }, [songViewMode]);\n\n  return (\n    <IonPage>\n      <IonHeader>\n        <NavigationBar\n          backButtonOnClick={() => {\n            history.push(`/${bookId}`);\n          }}\n          toggleSongModeOnClick={ToggleSongMode}\n          songViewMode={songViewMode}\n          musicPageUrl={musicPageUrl}\n          songDownloadName={`${bookId}_${songId}`}\n        />\n      </IonHeader>\n\n      <IonContent id=\"song-page-body\">\n        {/* TODO: Add error handling in case of non number song Id */}\n        {isDesktop() && RenderPrevButton(currSongId)}\n        {RenderSong(currSongId)}\n        {isDesktop() && RenderNextButton(currSongId)}\n      </IonContent>\n    </IonPage>\n  );\n\n  function RenderSong(songNumber: number) {\n    if (songViewMode === SongViewMode.Music) {\n      return <MusicView songNumber={songNumber} setMusicPageUrl={setMusicPageUrl} />;\n    } else {\n      return <LyricView songNumber={songNumber} />;\n    }\n  }\n\n  function ToggleSongMode() {\n    if (songViewMode === SongViewMode.Music) {\n      setSongViewMode(SongViewMode.Lyrics);\n    } else {\n      setSongViewMode(SongViewMode.Music);\n    }\n    try {\n      Event(\"INTERACTION\", \"Songmode is toggled\", \"SongMode_Toggle\");\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  function RenderPrevButton(songNumber: number) {\n    if (songNumber > 1) {\n      return (\n        <IonFab id=\"prevButton\" vertical=\"center\" horizontal=\"start\" slot=\"fixed\">\n          <IonFabButton color=\"medium\" onClick={navigateToPrevSong}>\n            <IonIcon class=\"pageTurnButton\" icon={arrowBackCircleOutline} />\n          </IonFabButton>\n        </IonFab>\n      );\n    }\n  }\n\n  function RenderNextButton(songNumber: number) {\n    if (songNumber < songBookLength) {\n      return (\n        <IonFab id=\"nextButton\" vertical=\"center\" horizontal=\"end\" slot=\"fixed\">\n          <IonFabButton color=\"medium\" onClick={navigateToNextSong}>\n            <IonIcon class=\"pageTurnButton\" icon={arrowForwardCircleOutline} />\n          </IonFabButton>\n        </IonFab>\n      );\n    }\n  }\n\n  function ToggleNavButtonListeners() {\n    const prevButtonElement = document.querySelector(\"#prevButton\") as HTMLElement;\n    const nextButtonElement = document.querySelector(\"#nextButton\") as HTMLElement;\n    const songPageCenterElement = document.querySelector(\".song-page-center\") as HTMLElement;\n\n    if (prevButtonElement) {\n      prevButtonElement.style.visibility = doElementsOverlap(prevButtonElement, songPageCenterElement)\n        ? \"hidden\"\n        : \"visible\";\n    }\n    if (nextButtonElement) {\n      nextButtonElement.style.visibility = doElementsOverlap(nextButtonElement, songPageCenterElement)\n        ? \"hidden\"\n        : \"visible\";\n    }\n  }\n\n  function navigateToNextSong() {\n    history.push(`/${bookId}/${Math.max(currSongId + 1, 1)}`);\n  }\n\n  function navigateToPrevSong() {\n    history.push(`/${bookId}/${Math.min(currSongId - 1, songBookLength)}`);\n  }\n};\n\nexport default SongPage;\n","import React, { useEffect } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\n/* Core CSS required for Ionic components to work properly */\nimport \"@ionic/react/css/core.css\";\n\n/* Basic CSS for apps built with Ionic */\nimport \"@ionic/react/css/normalize.css\";\nimport \"@ionic/react/css/structure.css\";\nimport \"@ionic/react/css/typography.css\";\n\n/* Optional CSS utils that can be commented out */\nimport \"@ionic/react/css/padding.css\";\nimport \"@ionic/react/css/float-elements.css\";\nimport \"@ionic/react/css/text-alignment.css\";\nimport \"@ionic/react/css/text-transformation.css\";\nimport \"@ionic/react/css/flex-utils.css\";\nimport \"@ionic/react/css/display.css\";\n\n/* Theme variables */\nimport \"./theme/variables.css\";\nimport HomePage from \"./pages/HomePage\";\nimport BookPage from \"./pages/BookPage\";\nimport SongPage from \"./pages/SongPage\";\nimport { initGA, PageView } from \"./tracking/GoogleAnalytics\";\nimport { logPlatforms } from \"./utils/PlatformUtils\";\nimport { THEME_KEY, DARK_THEME, LIGHT_THEME } from \"./utils/StorageUtils\";\n\ntry {\n  initGA();\n  PageView();\n} catch (e) {\n  console.error(e);\n}\n\nconst App: React.FC = () => {\n  logPlatforms();\n\n  useEffect(() => {\n    /**\n     * Set theme on load based on local setting.\n     * Uses system preferences for theme if local setting not set or cleared.\n     * Default to light theme in all other cases.\n     */\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    const localStorageTheme = window.localStorage.getItem(THEME_KEY);\n\n    // Clearing past search cache\n    localStorage.removeItem(\"searchString\");\n   \n    if (localStorageTheme === DARK_THEME || (prefersDark.matches && localStorageTheme !== LIGHT_THEME)) {\n      document.body.classList.toggle(DARK_THEME);\n    }\n  }, []);\n\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" component={HomePage} exact />\n        <Route path=\"/:bookId\" component={BookPage} exact />\n        <Route path=\"/:bookId/:songId\" component={SongPage} exact />\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t116,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t117,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t118,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t119,\n\t\t17\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t120,\n\t\t18\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t121,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t122,\n\t\t19\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t123,\n\t\t20\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t124,\n\t\t21\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t125,\n\t\t22\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t126,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t127,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t128,\n\t\t23\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t129,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t130,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t131,\n\t\t24\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t132,\n\t\t25\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t133,\n\t\t26\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t134,\n\t\t27\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t135,\n\t\t28\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t136,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t137,\n\t\t14\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t138,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t139,\n\t\t29\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t140,\n\t\t30\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t141,\n\t\t31\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t142,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t143,\n\t\t16\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t144,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t145,\n\t\t32\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t146,\n\t\t33\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t147,\n\t\t34\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t148,\n\t\t35\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t149,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t150,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t151,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t152,\n\t\t36\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t153,\n\t\t15\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t154,\n\t\t37\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t155,\n\t\t38\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t156,\n\t\t39\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t157,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t158,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 71;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t159,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 73;\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}